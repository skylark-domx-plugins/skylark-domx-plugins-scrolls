{"version":3,"sources":["skylark-domx-spy.js"],"names":["define","skylark","attach","langx","browser","eventer","noder","geom","$","plugins","spy","Affix","Plugin","inherit","klassName","pluginName","options","offset","target","window","_construct","elm","this","overrided","$target","on","proxy","checkPosition","checkPositionWithEventLoop","$element","affixed","unpin","pinnedOffset","getState","scrollHeight","height","offsetTop","offsetBottom","scrollTop","position","targetHeight","top","initializing","colliderTop","colliderHeight","getPinnedOffset","removeClass","RESET","addClass","setTimeout","is","bottom","Math","max","document","body","affix","css","affixType","e","create","trigger","isDefaultPrevented","replace","register","ScrollSpy","$body","$scrollElement","selector","offsets","targets","activeTarget","process","refresh","getScrollHeight","documentElement","that","offsetMethod","offsetBase","isWindow","find","map","$el","href","data","attr","$href","test","length","sort","a","b","each","push","i","maxScroll","activate","clear","undefined","active","parents","parent","closest","parentsUntil","main"],"mappings":"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","file":"../skylark-domx-spy.js","sourcesContent":["define('skylark-domx-spy/spy',[\r\n  \"skylark-langx/skylark\",\r\n],function(skylark){\r\n\r\n\r\n\treturn skylark.attach(\"domx.spy\",{});\r\n\r\n});\r\n\ndefine('skylark-domx-spy/Affix',[\n  \"skylark-langx/langx\",\n  \"skylark-domx-browser\",\n  \"skylark-domx-eventer\",\n  \"skylark-domx-noder\",\n  \"skylark-domx-geom\",\n  \"skylark-domx-query\",\n  \"skylark-domx-plugins\",\n  \"./spy\"\n],function(langx,browser,eventer,noder,geom,$,plugins,spy){\n\n  'use strict';\n\n  // AFFIX CLASS DEFINITION\n  // ======================\n\n  var Affix = spy.Affix = plugins.Plugin.inherit({\n        klassName: \"Affix\",\n\n        pluginName : \"domx.affix\",\n\n        options : {\n          offset: 0,\n          target: window\n        },\n\n        _construct : function(elm,options) {\n          this.overrided(elm,options);\n\n          this.$target = $(this.options.target)\n            .on('scroll.affix.data-api', langx.proxy(this.checkPosition, this))\n            .on('click.affix.data-api',  langx.proxy(this.checkPositionWithEventLoop, this))\n\n          this.$element     = this.$()\n          this.affixed      = null;\n          this.unpin        = null;\n          this.pinnedOffset = null;\n\n          this.checkPosition();\n        },\n\n        getState : function (scrollHeight, height, offsetTop, offsetBottom) {\n          var scrollTop    = this.$target.scrollTop()\n          var position     = this.$element.offset()\n          var targetHeight = this.$target.height()\n\n          if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false\n\n          if (this.affixed == 'bottom') {\n            if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'\n            return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'\n          }\n\n          var initializing   = this.affixed == null\n          var colliderTop    = initializing ? scrollTop : position.top\n          var colliderHeight = initializing ? targetHeight : height\n\n          if (offsetTop != null && scrollTop <= offsetTop) return 'top'\n          if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'\n\n          return false\n        },\n\n        getPinnedOffset : function () {\n          if (this.pinnedOffset) return this.pinnedOffset\n          this.$element.removeClass(Affix.RESET).addClass('affix')\n          var scrollTop = this.$target.scrollTop()\n          var position  = this.$element.offset()\n          return (this.pinnedOffset = position.top - scrollTop)\n        },\n\n        checkPositionWithEventLoop : function () {\n          setTimeout(langx.proxy(this.checkPosition, this), 1)\n        },\n\n        checkPosition : function () {\n          if (!this.$element.is(':visible')) return\n\n          var height       = this.$element.height()\n          var offset       = this.options.offset\n          var offsetTop    = offset.top\n          var offsetBottom = offset.bottom\n          var scrollHeight = Math.max($(document).height(), $(document.body).height())\n\n          if (typeof offset != 'object')         offsetBottom = offsetTop = offset\n          if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)\n          if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)\n\n          var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)\n\n          if (this.affixed != affix) {\n            if (this.unpin != null) this.$element.css('top', '')\n\n            var affixType = 'affix' + (affix ? '-' + affix : '')\n            var e         = eventer.create(affixType + '.affix')\n\n            this.$element.trigger(e)\n\n            if (e.isDefaultPrevented()) return\n\n            this.affixed = affix\n            this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null\n\n            this.$element\n              .removeClass(Affix.RESET)\n              .addClass(affixType)\n              .trigger(affixType.replace('affix', 'affixed') + '.affix')\n          }\n\n          if (affix == 'bottom') {\n            this.$element.offset({\n              top: scrollHeight - height - offsetBottom\n            })\n          }\n        }\n  });\n\n  Affix.RESET    = 'affix affix-top affix-bottom'\n\n  plugins.register(Affix);\n\n  return spy.Affix = Affix;\n});\n\ndefine('skylark-domx-spy/ScrollSpy',[\n  \"skylark-langx/langx\",\n  \"skylark-domx-browser\",\n  \"skylark-domx-eventer\",\n  \"skylark-domx-noder\",\n  \"skylark-domx-geom\",\n  \"skylark-domx-query\",\n  \"skylark-domx-plugins\",\n  \"./spy\"\n],function(langx,browser,eventer,noder,geom,$,plugins,spy){\n\n  'use strict';\n\n  // SCROLLSPY CLASS DEFINITION\n  // ==========================\n\n  var ScrollSpy =  plugins.Plugin.inherit({\n    klassName: \"ScrollSpy\",\n\n    pluginName : \"domx.scrollspy\",\n\n    options: {\n      offset: 10\n    },\n\n    _construct : function(elm,options) {\n      this.overrided(elm,options);\n      this.$body          = $(document.body)\n      this.$scrollElement = this.$().is(document.body) ? $(window) : this.$();\n      //this.options        = langx.mixin({}, ScrollSpy.DEFAULTS, options)\n      this.selector       = (this.options.target || '') + ' .nav li > a'\n      this.offsets        = []\n      this.targets        = []\n      this.activeTarget   = null\n      this.scrollHeight   = 0\n\n      this.$scrollElement.on('scroll.scrollspy', langx.proxy(this.process, this))\n      this.refresh()\n      this.process()\n    },\n\n    getScrollHeight : function () {\n      return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)\n    },\n\n    refresh : function () {\n      var that          = this\n      var offsetMethod  = 'offset'\n      var offsetBase    = 0\n\n      this.offsets      = []\n      this.targets      = []\n      this.scrollHeight = this.getScrollHeight()\n\n      if (!langx.isWindow(this.$scrollElement[0])) {\n        offsetMethod = 'position'\n        offsetBase   = this.$scrollElement.scrollTop()\n      }\n\n      this.$body\n        .find(this.selector)\n        .map(function () {\n          var $el   = $(this)\n          var href  = $el.data('target') || $el.attr('href')\n          var $href = /^#./.test(href) && $(href)\n\n          return ($href\n            && $href.length\n            && $href.is(':visible')\n            && [[$href[offsetMethod]().top + offsetBase, href]]) || null\n        })\n        .sort(function (a, b) { return a[0] - b[0] })\n        .each(function () {\n          that.offsets.push(this[0])\n          that.targets.push(this[1])\n        })\n    },\n\n    process : function () {\n      var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset\n      var scrollHeight = this.getScrollHeight()\n      var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()\n      var offsets      = this.offsets\n      var targets      = this.targets\n      var activeTarget = this.activeTarget\n      var i\n\n      if (this.scrollHeight != scrollHeight) {\n        this.refresh()\n      }\n\n      if (scrollTop >= maxScroll) {\n        return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)\n      }\n\n      if (activeTarget && scrollTop < offsets[0]) {\n        this.activeTarget = null\n        return this.clear()\n      }\n\n      for (i = offsets.length; i--;) {\n        activeTarget != targets[i]\n          && scrollTop >= offsets[i]\n          && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])\n          && this.activate(targets[i])\n      }\n    },\n\n    activate : function (target) {\n      this.activeTarget = target\n\n      this.clear()\n\n      var selector = this.selector +\n        '[data-target=\"' + target + '\"],' +\n        this.selector + '[href=\"' + target + '\"]'\n\n      var active = $(selector)\n        .parents('li')\n        .addClass('active')\n\n      if (active.parent('.dropdown-menu').length) {\n        active = active\n          .closest('li.dropdown')\n          .addClass('active')\n      }\n\n      active.trigger('activate.scrollspy')\n    },\n\n    clear : function () {\n      $(this.selector)\n        .parentsUntil(this.options.target, '.active')\n        .removeClass('active')\n    }\n\n  });\n\n  plugins.register(ScrollSpy);\n\n  return spy.ScrollSpy = ScrollSpy;\n\n});\n\ndefine('skylark-domx-spy/main',[\r\n    \"./spy\",\r\n    \"./Affix\",\r\n    \"./ScrollSpy\"\r\n], function(spy) {\r\n    return spy;\r\n});\ndefine('skylark-domx-spy', ['skylark-domx-spy/main'], function (main) { return main; });\n\n"]}