{"version":3,"sources":["skylark-domx-spy.js"],"names":["define","skylark","attach","langx","browser","eventer","noder","geom","$","plugins","scrolls","Affix","Plugin","inherit","klassName","pluginName","options","offset","target","window","_construct","elm","this","overrided","$target","on","proxy","checkPosition","checkPositionWithEventLoop","$element","affixed","unpin","pinnedOffset","getState","scrollHeight","height","offsetTop","offsetBottom","scrollTop","position","targetHeight","top","initializing","colliderTop","colliderHeight","getPinnedOffset","removeClass","RESET","addClass","setTimeout","is","bottom","Math","max","document","body","affix","css","affixType","e","create","trigger","isDefaultPrevented","replace","register","InfiniteScroll","dataSource","hybrid","percentage","curScrollTop","curPercentage","getPercentage","fetchingData","onScroll","destroy","remove","empty","outerHTML","disable","off","enable","end","content","append","outerHeight","get","fetchData","force","moreBtn","load","self","fetch","helpers","$loader","loader","resp","undefined","label","ScrollSpy","$body","$scrollElement","selector","offsets","targets","activeTarget","process","refresh","getScrollHeight","documentElement","that","offsetMethod","offsetBase","isWindow","find","map","$el","href","data","attr","$href","test","length","sort","a","b","each","push","i","maxScroll","activate","clear","active","parents","parent","closest","parentsUntil","main"],"mappings":";;;;;;;g4BAAAA,EAAA,4BACA,yBACA,SAAAC,GAGA,OAAAA,EAAAC,OAAA,qBAIAF,EAAA,0BACA,sBACA,uBACA,uBACA,qBACA,oBACA,qBACA,uBACA,aACA,SAAAG,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,aAKA,IAAAC,EAAAF,EAAAG,OAAAC,SACAC,UAAA,QAEAC,WAAA,aAEAC,SACAC,OAAA,EACAC,OAAAC,QAGAC,WAAA,SAAAC,EAAAL,GACAM,KAAAC,UAAAF,EAAAL,GAEAM,KAAAE,QAAAhB,EAAAc,KAAAN,QAAAE,QACAO,GAAA,wBAAAtB,EAAAuB,MAAAJ,KAAAK,cAAAL,OACAG,GAAA,uBAAAtB,EAAAuB,MAAAJ,KAAAM,2BAAAN,OAEAA,KAAAO,SAAAP,KAAAd,IACAc,KAAAQ,QAAA,KACAR,KAAAS,MAAA,KACAT,KAAAU,aAAA,KAEAV,KAAAK,iBAGAM,SAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAhB,KAAAE,QAAAc,YACAC,EAAAjB,KAAAO,SAAAZ,SACAuB,EAAAlB,KAAAE,QAAAW,SAEA,GAAA,MAAAC,GAAA,OAAAd,KAAAQ,QAAA,OAAAQ,EAAAF,GAAA,MAEA,GAAA,UAAAd,KAAAQ,QACA,OAAA,MAAAM,IAAAE,EAAAhB,KAAAS,OAAAQ,EAAAE,MAAA,WACAH,EAAAE,GAAAN,EAAAG,IAAA,SAGA,IAAAK,EAAA,MAAApB,KAAAQ,QACAa,EAAAD,EAAAJ,EAAAC,EAAAE,IACAG,EAAAF,EAAAF,EAAAL,EAEA,OAAA,MAAAC,GAAAE,GAAAF,EAAA,MACA,MAAAC,GAAAM,EAAAC,GAAAV,EAAAG,GAAA,UAKAQ,gBAAA,WACA,GAAAvB,KAAAU,aAAA,OAAAV,KAAAU,aACAV,KAAAO,SAAAiB,YAAAnC,EAAAoC,OAAAC,SAAA,SACA,IAAAV,EAAAhB,KAAAE,QAAAc,YACAC,EAAAjB,KAAAO,SAAAZ,SACA,OAAAK,KAAAU,aAAAO,EAAAE,IAAAH,GAGAV,2BAAA,WAhFAqB,WAAA9C,EAAAuB,MAAAJ,KAAAK,cAAAL,MAAA,IAGAK,cAAA,WACA,GAAAL,KAAAO,SAAAqB,GAAA,YAAA,CAEA,IAAAf,EAAAb,KAAAO,SAAAM,SACAlB,EAAAK,KAAAN,QAAAC,OACAmB,EAAAnB,EAAAwB,IACAJ,EAAApB,EAAAkC,OACAjB,EAAAkB,KAAAC,IAAA7C,EAAA8C,UAAAnB,SAAA3B,EAAA8C,SAAAC,MAAApB,UAEA,iBAAAlB,IAAAoB,EAAAD,EAAAnB,GACA,mBAAAmB,IAAAA,EAAAnB,EAAAwB,IAAAnB,KAAAO,WACA,mBAAAQ,IAAAA,EAAApB,EAAAkC,OAAA7B,KAAAO,WAEA,IAAA2B,EAAAlC,KAAAW,SAAAC,EAAAC,EAAAC,EAAAC,GAEA,GAAAf,KAAAQ,SAAA0B,EAAA,CACA,MAAAlC,KAAAS,OAAAT,KAAAO,SAAA4B,IAAA,MAAA,IAEA,IAAAC,EAAA,SAAAF,EAAA,IAAAA,EAAA,IACAG,EAAAtD,EAAAuD,OAAAF,EAAA,UAIA,GAFApC,KAAAO,SAAAgC,QAAAF,GAEAA,EAAAG,qBAAA,OAEAxC,KAAAQ,QAAA0B,EACAlC,KAAAS,MAAA,UAAAyB,EAAAlC,KAAAuB,kBAAA,KAEAvB,KAAAO,SACAiB,YAAAnC,EAAAoC,OACAC,SAAAU,GACAG,QAAAH,EAAAK,QAAA,QAAA,WAAA,UAGA,UAAAP,GACAlC,KAAAO,SAAAZ,QACAwB,IAAAP,EAAAC,EAAAE,QAUA,OAJA1B,EAAAoC,MAAA,+BAEAtC,EAAAuD,SAAArD,GAEAD,EAAAC,MAAAA,IAGAX,EAAA,mCACA,sBACA,uBACA,uBACA,qBACA,oBACA,qBACA,uBACA,aACA,SAAAG,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,aAIA,IAAAuD,EAAAxD,EAAAG,OAAAC,SACAC,UAAA,iBAEAC,WAAA,sBAEAC,SACAkD,WAAA,KACAC,QAAA,EACAC,WAAA,IAGAhD,WAAA,SAAAC,EAAAL,GACAM,KAAAC,UAAAF,EAAAL,GACAM,KAAAO,SAAAP,KAAAd,IACAc,KAAAO,SAAAmB,SAAA,kBAGA1B,KAAA+C,aAAA/C,KAAAO,SAAAS,YACAhB,KAAAgD,cAAAhD,KAAAiD,gBACAjD,KAAAkD,cAAA,EAEAlD,KAAAO,SAAAJ,GAAA,6BAAAtB,EAAAuB,MAAAJ,KAAAmD,SAAAnD,OACAA,KAAAmD,YAGAC,QAAA,WAQA,OAPApD,KAAAO,SAAA8C,SAKArD,KAAAO,SAAA+C,QAEAtD,KAAAO,SAAA,GAAAgD,WAGAC,QAAA,WACAxD,KAAAO,SAAAkD,IAAA,+BAGAC,OAAA,WACA1D,KAAAO,SAAAJ,GAAA,6BAAAtB,EAAAuB,MAAAJ,KAAAmD,SAAAnD,QAGA2D,IAAA,SAAAC,GACA,IAAAD,EAAAzE,EAAA,0CACA0E,EACAD,EAAAE,OAAAD,GAEAD,EAAAE,OAAA,aAGA7D,KAAAO,SAAAsD,OAAAF,GACA3D,KAAAwD,WAGAP,cAAA,WACA,IAAApC,EAAA,eAAAb,KAAAO,SAAA4B,IAAA,cAAAnC,KAAAO,SAAAuD,cAAA9D,KAAAO,SAAAM,SACAD,EAAAZ,KAAAO,SAAAwD,IAAA,GAAAnD,aACA,OAAAA,EAAAC,EAAAA,GAAAD,EAAAZ,KAAA+C,cAAA,IAAA,GAGAiB,UAAA,SAAAC,GACA,IAEAC,EAFAC,EAAAjF,EAAA,2CACAkF,EAAApE,KAGAqE,EAAA,WACA,IAAAC,GACAxB,WAAAsB,EAAApB,cACAhC,UAAAoD,EAAArB,cAEAwB,EAAArF,EAAA,8BACAiF,EAAAN,OAAAU,GACAA,EAAAC,SACAJ,EAAA1E,QAAAkD,YACAwB,EAAA1E,QAAAkD,WAAA0B,EAAA,SAAAG,GACA,IAAAd,EACAQ,EAAAd,SACAoB,EAAAb,SACAQ,EAAA7D,SAAAsD,OAAAY,EAAAb,SAGAa,EAAAd,MACAA,GAAA,IAAAc,EAAAd,IAAAc,EAAAd,SAAAe,EACAN,EAAAT,IAAAA,IAGAS,EAAAlB,cAAA,KAKAlD,KAAAkD,cAAA,EACAlD,KAAAO,SAAAsD,OAAAM,GACAnE,KAAAN,QAAAmD,SAAA,IAAAoB,GACAC,EAAAhF,EAAA,2DACA,iBAAAc,KAAAN,QAAAmD,OACAqB,EAAAL,OAAA7D,KAAAN,QAAAmD,OAAA8B,OAEAT,EAAAL,OAAA,oDAGAK,EAAA/D,GAAA,4BAAA,WACA+D,EAAAb,SACAgB,MAEAF,EAAAN,OAAAK,IAEAG,KAIAlB,SAAA,SAAAd,GACArC,KAAA+C,aAAA/C,KAAAO,SAAAS,YACAhB,KAAAgD,cAAAhD,KAAAiD,iBACAjD,KAAAkD,cAAAlD,KAAAgD,eAAAhD,KAAAN,QAAAoD,YACA9C,KAAAgE,eAOA,OAFA7E,EAAAuD,SAAAC,GAEAvD,EAAAuD,eAAAA,IAGAjE,EAAA,8BACA,sBACA,uBACA,uBACA,qBACA,oBACA,qBACA,uBACA,aACA,SAAAG,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,aAKA,IAAAwF,EAAAzF,EAAAG,OAAAC,SACAC,UAAA,YAEAC,WAAA,iBAEAC,SACAC,OAAA,IAGAG,WAAA,SAAAC,EAAAL,GACAM,KAAAC,UAAAF,EAAAL,GACAM,KAAA6E,MAAA3F,EAAA8C,SAAAC,MACAjC,KAAA8E,eAAA9E,KAAAd,IAAA0C,GAAAI,SAAAC,MAAA/C,EAAAW,QAAAG,KAAAd,IAEAc,KAAA+E,UAAA/E,KAAAN,QAAAE,QAAA,IAAA,eACAI,KAAAgF,WACAhF,KAAAiF,WACAjF,KAAAkF,aAAA,KACAlF,KAAAY,aAAA,EAEAZ,KAAA8E,eAAA3E,GAAA,mBAAAtB,EAAAuB,MAAAJ,KAAAmF,QAAAnF,OACAA,KAAAoF,UACApF,KAAAmF,WAGAE,gBAAA,WACA,OAAArF,KAAA8E,eAAA,GAAAlE,cAAAkB,KAAAC,IAAA/B,KAAA6E,MAAA,GAAAjE,aAAAoB,SAAAsD,gBAAA1E,eAGAwE,QAAA,WACA,IAAAG,EAAAvF,KACAwF,EAAA,SACAC,EAAA,EAEAzF,KAAAgF,WACAhF,KAAAiF,WACAjF,KAAAY,aAAAZ,KAAAqF,kBAEAxG,EAAA6G,SAAA1F,KAAA8E,eAAA,MACAU,EAAA,WACAC,EAAAzF,KAAA8E,eAAA9D,aAGAhB,KAAA6E,MACAc,KAAA3F,KAAA+E,UACAa,IAAA,WACA,IAAAC,EAAA3G,EAAAc,MACA8F,EAAAD,EAAAE,KAAA,WAAAF,EAAAG,KAAA,QACAC,EAAA,MAAAC,KAAAJ,IAAA5G,EAAA4G,GAEA,OAAAG,GACAA,EAAAE,QACAF,EAAArE,GAAA,eACAqE,EAAAT,KAAArE,IAAAsE,EAAAK,KAAA,OAEAM,KAAA,SAAAC,EAAAC,GAAA,OAAAD,EAAA,GAAAC,EAAA,KACAC,KAAA,WACAhB,EAAAP,QAAAwB,KAAAxG,KAAA,IACAuF,EAAAN,QAAAuB,KAAAxG,KAAA,OAIAmF,QAAA,WACA,IAMAsB,EANAzF,EAAAhB,KAAA8E,eAAA9D,YAAAhB,KAAAN,QAAAC,OACAiB,EAAAZ,KAAAqF,kBACAqB,EAAA1G,KAAAN,QAAAC,OAAAiB,EAAAZ,KAAA8E,eAAAjE,SACAmE,EAAAhF,KAAAgF,QACAC,EAAAjF,KAAAiF,QACAC,EAAAlF,KAAAkF,aAOA,GAJAlF,KAAAY,cAAAA,GACAZ,KAAAoF,UAGApE,GAAA0F,EACA,OAAAxB,IAAAuB,EAAAxB,EAAAA,EAAAkB,OAAA,KAAAnG,KAAA2G,SAAAF,GAGA,GAAAvB,GAAAlE,EAAAgE,EAAA,GAEA,OADAhF,KAAAkF,aAAA,KACAlF,KAAA4G,QAGA,IAAAH,EAAAzB,EAAAmB,OAAAM,KACAvB,GAAAD,EAAAwB,IACAzF,GAAAgE,EAAAyB,UACA/B,IAAAM,EAAAyB,EAAA,IAAAzF,EAAAgE,EAAAyB,EAAA,KACAzG,KAAA2G,SAAA1B,EAAAwB,KAIAE,SAAA,SAAA/G,GACAI,KAAAkF,aAAAtF,EAEAI,KAAA4G,QAEA,IAAA7B,EAAA/E,KAAA+E,SACA,iBAAAnF,EAAA,MACAI,KAAA+E,SAAA,UAAAnF,EAAA,KAEAiH,EAAA3H,EAAA6F,GACA+B,QAAA,MACApF,SAAA,UAEAmF,EAAAE,OAAA,kBAAAZ,SACAU,EAAAA,EACAG,QAAA,eACAtF,SAAA,WAGAmF,EAAAtE,QAAA,uBAGAqE,MAAA,WACA1H,EAAAc,KAAA+E,UACAkC,aAAAjH,KAAAN,QAAAE,OAAA,WACA4B,YAAA,aAOA,OAFArC,EAAAuD,SAAAkC,GAEAxF,EAAAwF,UAAAA,IAIAlG,EAAA,yBACA,YACA,UACA,mBACA,eACA,SAAAU,GACA,OAAAA,IAEAV,EAAA,oBAAA,yBAAA,SAAAwI,GAAA,OAAAA","file":"../skylark-domx-spy.js","sourcesContent":["define('skylark-domx-spy/scrolls',[\r\n  \"skylark-langx/skylark\",\r\n],function(skylark){\r\n\r\n\r\n\treturn skylark.attach(\"domx.scrolls\",{});\r\n\r\n});\r\n\ndefine('skylark-domx-spy/Affix',[\n  \"skylark-langx/langx\",\n  \"skylark-domx-browser\",\n  \"skylark-domx-eventer\",\n  \"skylark-domx-noder\",\n  \"skylark-domx-geom\",\n  \"skylark-domx-query\",\n  \"skylark-domx-plugins\",\n  \"./scrolls\"\n],function(langx,browser,eventer,noder,geom,$,plugins,scrolls){\n\n  'use strict';\n\n  // AFFIX CLASS DEFINITION\n  // ======================\n\n  var Affix = plugins.Plugin.inherit({\n        klassName: \"Affix\",\n\n        pluginName : \"domx.affix\",\n\n        options : {\n          offset: 0,\n          target: window\n        },\n\n        _construct : function(elm,options) {\n          this.overrided(elm,options);\n\n          this.$target = $(this.options.target)\n            .on('scroll.affix.data-api', langx.proxy(this.checkPosition, this))\n            .on('click.affix.data-api',  langx.proxy(this.checkPositionWithEventLoop, this))\n\n          this.$element     = this.$()\n          this.affixed      = null;\n          this.unpin        = null;\n          this.pinnedOffset = null;\n\n          this.checkPosition();\n        },\n\n        getState : function (scrollHeight, height, offsetTop, offsetBottom) {\n          var scrollTop    = this.$target.scrollTop()\n          var position     = this.$element.offset()\n          var targetHeight = this.$target.height()\n\n          if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false\n\n          if (this.affixed == 'bottom') {\n            if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'\n            return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'\n          }\n\n          var initializing   = this.affixed == null\n          var colliderTop    = initializing ? scrollTop : position.top\n          var colliderHeight = initializing ? targetHeight : height\n\n          if (offsetTop != null && scrollTop <= offsetTop) return 'top'\n          if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'\n\n          return false\n        },\n\n        getPinnedOffset : function () {\n          if (this.pinnedOffset) return this.pinnedOffset\n          this.$element.removeClass(Affix.RESET).addClass('affix')\n          var scrollTop = this.$target.scrollTop()\n          var position  = this.$element.offset()\n          return (this.pinnedOffset = position.top - scrollTop)\n        },\n\n        checkPositionWithEventLoop : function () {\n          setTimeout(langx.proxy(this.checkPosition, this), 1)\n        },\n\n        checkPosition : function () {\n          if (!this.$element.is(':visible')) return\n\n          var height       = this.$element.height()\n          var offset       = this.options.offset\n          var offsetTop    = offset.top\n          var offsetBottom = offset.bottom\n          var scrollHeight = Math.max($(document).height(), $(document.body).height())\n\n          if (typeof offset != 'object')         offsetBottom = offsetTop = offset\n          if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)\n          if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)\n\n          var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)\n\n          if (this.affixed != affix) {\n            if (this.unpin != null) this.$element.css('top', '')\n\n            var affixType = 'affix' + (affix ? '-' + affix : '')\n            var e         = eventer.create(affixType + '.affix')\n\n            this.$element.trigger(e)\n\n            if (e.isDefaultPrevented()) return\n\n            this.affixed = affix\n            this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null\n\n            this.$element\n              .removeClass(Affix.RESET)\n              .addClass(affixType)\n              .trigger(affixType.replace('affix', 'affixed') + '.affix')\n          }\n\n          if (affix == 'bottom') {\n            this.$element.offset({\n              top: scrollHeight - height - offsetBottom\n            })\n          }\n        }\n  });\n\n  Affix.RESET    = 'affix affix-top affix-bottom'\n\n  plugins.register(Affix);\n\n  return scrolls.Affix = Affix;\n});\n\ndefine('skylark-domx-spy/InfiniteScroll',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins\",\r\n  \"./scrolls\"\r\n],function(langx,browser,eventer,noder,geom,$,plugins,scrolls){\r\n\r\n  'use strict';\r\n\r\n\t// INFINITE SCROLL CONSTRUCTOR AND PROTOTYPE\r\n\r\n  var InfiniteScroll = plugins.Plugin.inherit({\r\n        klassName: \"InfiniteScroll\",\r\n\r\n        pluginName : \"domx.infinitescroll\",\r\n\r\n        options : {\r\n\t\t\tdataSource: null,\r\n\t\t\thybrid: false,//can be true or an object with structure: { 'label': (markup or jQuery obj) }\r\n\t\t\tpercentage: 95//percentage scrolled to the bottom before more is loaded\r\n        },\r\n\r\n        _construct : function(elm,options) {\r\n\t        this.overrided(elm,options);\r\n\t\t\tthis.$element = this.$();\r\n\t\t\tthis.$element.addClass('infinitescroll');\r\n\t\t\t//this.options = langx.mixin({}, $.fn.infinitescroll.defaults, options);\r\n\r\n\t\t\tthis.curScrollTop = this.$element.scrollTop();\r\n\t\t\tthis.curPercentage = this.getPercentage();\r\n\t\t\tthis.fetchingData = false;\r\n\r\n\t\t\tthis.$element.on('scroll.domx.infinitescroll', langx.proxy(this.onScroll, this));\r\n\t\t\tthis.onScroll();\r\n\t\t},\r\n\r\n\t\tdestroy: function () {\r\n\t\t\tthis.$element.remove();\r\n\t\t\t// any external bindings\r\n\t\t\t// [none]\r\n\r\n\t\t\t// empty elements to return to original markup\r\n\t\t\tthis.$element.empty();\r\n\r\n\t\t\treturn this.$element[0].outerHTML;\r\n\t\t},\r\n\r\n\t\tdisable: function () {\r\n\t\t\tthis.$element.off('scroll.domx.infinitescroll');\r\n\t\t},\r\n\r\n\t\tenable: function () {\r\n\t\t\tthis.$element.on('scroll.domx.infinitescroll', langx.proxy(this.onScroll, this));\r\n\t\t},\r\n\r\n\t\tend: function (content) {\r\n\t\t\tvar end = $('<div class=\"infinitescroll-end\"></div>');\r\n\t\t\tif (content) {\r\n\t\t\t\tend.append(content);\r\n\t\t\t} else {\r\n\t\t\t\tend.append('---------');\r\n\t\t\t}\r\n\r\n\t\t\tthis.$element.append(end);\r\n\t\t\tthis.disable();\r\n\t\t},\r\n\r\n\t\tgetPercentage: function () {\r\n\t\t\tvar height = (this.$element.css('box-sizing') === 'border-box') ? this.$element.outerHeight() : this.$element.height();\r\n\t\t\tvar scrollHeight = this.$element.get(0).scrollHeight;\r\n\t\t\treturn (scrollHeight > height) ? ((height / (scrollHeight - this.curScrollTop)) * 100) : 0;\r\n\t\t},\r\n\r\n\t\tfetchData: function (force) {\r\n\t\t\tvar load = $('<div class=\"infinitescroll-load\"></div>');\r\n\t\t\tvar self = this;\r\n\t\t\tvar moreBtn;\r\n\r\n\t\t\tvar fetch = function () {\r\n\t\t\t\tvar helpers = {\r\n\t\t\t\t\tpercentage: self.curPercentage,\r\n\t\t\t\t\tscrollTop: self.curScrollTop\r\n\t\t\t\t};\r\n\t\t\t\tvar $loader = $('<div class=\"loader\"></div>');\r\n\t\t\t\tload.append($loader);\r\n\t\t\t\t$loader.loader();\r\n\t\t\t\tif (self.options.dataSource) {\r\n\t\t\t\t\tself.options.dataSource(helpers, function (resp) {\r\n\t\t\t\t\t\tvar end;\r\n\t\t\t\t\t\tload.remove();\r\n\t\t\t\t\t\tif (resp.content) {\r\n\t\t\t\t\t\t\tself.$element.append(resp.content);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (resp.end) {\r\n\t\t\t\t\t\t\tend = (resp.end !== true) ? resp.end : undefined;\r\n\t\t\t\t\t\t\tself.end(end);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tself.fetchingData = false;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tthis.fetchingData = true;\r\n\t\t\tthis.$element.append(load);\r\n\t\t\tif (this.options.hybrid && force !== true) {\r\n\t\t\t\tmoreBtn = $('<button type=\"button\" class=\"btn btn-primary\"></button>');\r\n\t\t\t\tif (typeof this.options.hybrid === 'object') {\r\n\t\t\t\t\tmoreBtn.append(this.options.hybrid.label);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmoreBtn.append('<span class=\"glyphicon glyphicon-repeat\"></span>');\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmoreBtn.on('click.domx.infinitescroll', function () {\r\n\t\t\t\t\tmoreBtn.remove();\r\n\t\t\t\t\tfetch();\r\n\t\t\t\t});\r\n\t\t\t\tload.append(moreBtn);\r\n\t\t\t} else {\r\n\t\t\t\tfetch();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonScroll: function (e) {\r\n\t\t\tthis.curScrollTop = this.$element.scrollTop();\r\n\t\t\tthis.curPercentage = this.getPercentage();\r\n\t\t\tif (!this.fetchingData && this.curPercentage >= this.options.percentage) {\r\n\t\t\t\tthis.fetchData();\r\n\t\t\t}\r\n\t\t}\r\n  });\r\n\r\n  plugins.register(InfiniteScroll);\r\n\r\n  return scrolls.InfiniteScroll = InfiniteScroll;\t\r\n});\r\n\ndefine('skylark-domx-spy/ScrollSpy',[\n  \"skylark-langx/langx\",\n  \"skylark-domx-browser\",\n  \"skylark-domx-eventer\",\n  \"skylark-domx-noder\",\n  \"skylark-domx-geom\",\n  \"skylark-domx-query\",\n  \"skylark-domx-plugins\",\n  \"./scrolls\"\n],function(langx,browser,eventer,noder,geom,$,plugins,scrolls){\n\n  'use strict';\n\n  // SCROLLSPY CLASS DEFINITION\n  // ==========================\n\n  var ScrollSpy =  plugins.Plugin.inherit({\n    klassName: \"ScrollSpy\",\n\n    pluginName : \"domx.scrollspy\",\n\n    options: {\n      offset: 10\n    },\n\n    _construct : function(elm,options) {\n      this.overrided(elm,options);\n      this.$body          = $(document.body)\n      this.$scrollElement = this.$().is(document.body) ? $(window) : this.$();\n      //this.options        = langx.mixin({}, ScrollSpy.DEFAULTS, options)\n      this.selector       = (this.options.target || '') + ' .nav li > a'\n      this.offsets        = []\n      this.targets        = []\n      this.activeTarget   = null\n      this.scrollHeight   = 0\n\n      this.$scrollElement.on('scroll.scrollspy', langx.proxy(this.process, this))\n      this.refresh()\n      this.process()\n    },\n\n    getScrollHeight : function () {\n      return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)\n    },\n\n    refresh : function () {\n      var that          = this\n      var offsetMethod  = 'offset'\n      var offsetBase    = 0\n\n      this.offsets      = []\n      this.targets      = []\n      this.scrollHeight = this.getScrollHeight()\n\n      if (!langx.isWindow(this.$scrollElement[0])) {\n        offsetMethod = 'position'\n        offsetBase   = this.$scrollElement.scrollTop()\n      }\n\n      this.$body\n        .find(this.selector)\n        .map(function () {\n          var $el   = $(this)\n          var href  = $el.data('target') || $el.attr('href')\n          var $href = /^#./.test(href) && $(href)\n\n          return ($href\n            && $href.length\n            && $href.is(':visible')\n            && [[$href[offsetMethod]().top + offsetBase, href]]) || null\n        })\n        .sort(function (a, b) { return a[0] - b[0] })\n        .each(function () {\n          that.offsets.push(this[0])\n          that.targets.push(this[1])\n        })\n    },\n\n    process : function () {\n      var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset\n      var scrollHeight = this.getScrollHeight()\n      var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()\n      var offsets      = this.offsets\n      var targets      = this.targets\n      var activeTarget = this.activeTarget\n      var i\n\n      if (this.scrollHeight != scrollHeight) {\n        this.refresh()\n      }\n\n      if (scrollTop >= maxScroll) {\n        return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)\n      }\n\n      if (activeTarget && scrollTop < offsets[0]) {\n        this.activeTarget = null\n        return this.clear()\n      }\n\n      for (i = offsets.length; i--;) {\n        activeTarget != targets[i]\n          && scrollTop >= offsets[i]\n          && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])\n          && this.activate(targets[i])\n      }\n    },\n\n    activate : function (target) {\n      this.activeTarget = target\n\n      this.clear()\n\n      var selector = this.selector +\n        '[data-target=\"' + target + '\"],' +\n        this.selector + '[href=\"' + target + '\"]'\n\n      var active = $(selector)\n        .parents('li')\n        .addClass('active')\n\n      if (active.parent('.dropdown-menu').length) {\n        active = active\n          .closest('li.dropdown')\n          .addClass('active')\n      }\n\n      active.trigger('activate.scrollspy')\n    },\n\n    clear : function () {\n      $(this.selector)\n        .parentsUntil(this.options.target, '.active')\n        .removeClass('active')\n    }\n\n  });\n\n  plugins.register(ScrollSpy);\n\n  return scrolls.ScrollSpy = ScrollSpy;\n\n});\n\ndefine('skylark-domx-spy/main',[\r\n    \"./scrolls\",\r\n    \"./Affix\",\r\n    \"./InfiniteScroll\",\r\n    \"./ScrollSpy\"\r\n], function(scrolls) {\r\n    return scrolls;\r\n});\ndefine('skylark-domx-spy', ['skylark-domx-spy/main'], function (main) { return main; });\n\n"]}