{"version":3,"sources":["ScrollSpy.js"],"names":["define","langx","browser","eventer","noder","geom","$","plugins","spy","ScrollSpy","Plugin","inherit","klassName","pluginName","options","offset","_construct","elm","this","overrided","$body","document","body","$scrollElement","element","is","window","selector","target","offsets","targets","activeTarget","scrollHeight","on","proxy","process","refresh","getScrollHeight","Math","max","documentElement","that","offsetMethod","offsetBase","isWindow","scrollTop","find","map","$el","href","data","attr","$href","test","length","top","sort","a","b","each","push","i","maxScroll","height","activate","clear","undefined","active","parents","addClass","parent","closest","trigger","parentsUntil","removeClass","register"],"mappings":";;;;;;;AAAAA,QACE,sBACA,uBACA,uBACA,qBACA,oBACA,qBACA,uBACA,SACA,SAASC,EAAMC,EAAQC,EAAQC,EAAMC,EAAKC,EAAEC,EAAQC,GAEpD,aAKA,IAAIC,EAAaF,EAAQG,OAAOC,SAC9BC,UAAW,YAEXC,WAAa,iBAEbC,SACEC,OAAQ,IAGVC,WAAa,SAASC,EAAIH,GACxBI,KAAKC,UAAUF,EAAIH,GACnBI,KAAKE,MAAiBd,EAAEe,SAASC,MACjCJ,KAAKK,eAAiBjB,EAAEkB,SAASC,GAAGJ,SAASC,MAAQhB,EAAEoB,QAAUpB,EAAEkB,SAEnEN,KAAKS,UAAkBT,KAAKJ,QAAQc,QAAU,IAAM,eACpDV,KAAKW,WACLX,KAAKY,WACLZ,KAAKa,aAAiB,KACtBb,KAAKc,aAAiB,EAEtBd,KAAKK,eAAeU,GAAG,mBAAoBhC,EAAMiC,MAAMhB,KAAKiB,QAASjB,OACrEA,KAAKkB,UACLlB,KAAKiB,WAGPE,gBAAkB,WAChB,OAAOnB,KAAKK,eAAe,GAAGS,cAAgBM,KAAKC,IAAIrB,KAAKE,MAAM,GAAGY,aAAcX,SAASmB,gBAAgBR,eAG9GI,QAAU,WACR,IAAIK,EAAgBvB,KAChBwB,EAAgB,SAChBC,EAAgB,EAEpBzB,KAAKW,WACLX,KAAKY,WACLZ,KAAKc,aAAed,KAAKmB,kBAEpBpC,EAAM2C,SAAS1B,KAAKK,eAAe,MACtCmB,EAAe,WACfC,EAAezB,KAAKK,eAAesB,aAGrC3B,KAAKE,MACF0B,KAAK5B,KAAKS,UACVoB,IAAI,WACH,IAAIC,EAAQ1C,EAAEY,MACV+B,EAAQD,EAAIE,KAAK,WAAaF,EAAIG,KAAK,QACvCC,EAAQ,MAAMC,KAAKJ,IAAS3C,EAAE2C,GAElC,OAAQG,GACHA,EAAME,QACNF,EAAM3B,GAAG,eACP2B,EAAMV,KAAgBa,IAAMZ,EAAYM,KAAW,OAE3DO,KAAK,SAAUC,EAAGC,GAAK,OAAOD,EAAE,GAAKC,EAAE,KACvCC,KAAK,WACJlB,EAAKZ,QAAQ+B,KAAK1C,KAAK,IACvBuB,EAAKX,QAAQ8B,KAAK1C,KAAK,OAI7BiB,QAAU,WACR,IAMI0B,EANAhB,EAAe3B,KAAKK,eAAesB,YAAc3B,KAAKJ,QAAQC,OAC9DiB,EAAed,KAAKmB,kBACpByB,EAAe5C,KAAKJ,QAAQC,OAASiB,EAAed,KAAKK,eAAewC,SACxElC,EAAeX,KAAKW,QACpBC,EAAeZ,KAAKY,QACpBC,EAAeb,KAAKa,aAOxB,GAJIb,KAAKc,cAAgBA,GACvBd,KAAKkB,UAGHS,GAAaiB,EACf,OAAO/B,IAAiB8B,EAAI/B,EAAQA,EAAQwB,OAAS,KAAOpC,KAAK8C,SAASH,GAG5E,GAAI9B,GAAgBc,EAAYhB,EAAQ,GAEtC,OADAX,KAAKa,aAAe,KACbb,KAAK+C,QAGd,IAAKJ,EAAIhC,EAAQyB,OAAQO,KACvB9B,GAAgBD,EAAQ+B,IACnBhB,GAAahB,EAAQgC,UACDK,IAAnBrC,EAAQgC,EAAI,IAAoBhB,EAAYhB,EAAQgC,EAAI,KACzD3C,KAAK8C,SAASlC,EAAQ+B,KAI/BG,SAAW,SAAUpC,GACnBV,KAAKa,aAAeH,EAEpBV,KAAK+C,QAEL,IAAItC,EAAWT,KAAKS,SAClB,iBAAmBC,EAAS,MAC5BV,KAAKS,SAAW,UAAYC,EAAS,KAEnCuC,EAAS7D,EAAEqB,GACZyC,QAAQ,MACRC,SAAS,UAERF,EAAOG,OAAO,kBAAkBhB,SAClCa,EAASA,EACNI,QAAQ,eACRF,SAAS,WAGdF,EAAOK,QAAQ,uBAGjBP,MAAQ,WACN3D,EAAEY,KAAKS,UACJ8C,aAAavD,KAAKJ,QAAQc,OAAQ,WAClC8C,YAAY,aAOnB,OAFAnE,EAAQoE,SAASlE,GAEVD,EAAIC,UAAYA","file":"../ScrollSpy.js","sourcesContent":["define([\n  \"skylark-langx/langx\",\n  \"skylark-domx-browser\",\n  \"skylark-domx-eventer\",\n  \"skylark-domx-noder\",\n  \"skylark-domx-geom\",\n  \"skylark-domx-query\",\n  \"skylark-domx-plugins\",\n  \"./spy\"\n],function(langx,browser,eventer,noder,geom,$,plugins,spy){\n\n  'use strict';\n\n  // SCROLLSPY CLASS DEFINITION\n  // ==========================\n\n  var ScrollSpy =  plugins.Plugin.inherit({\n    klassName: \"ScrollSpy\",\n\n    pluginName : \"domx.scrollspy\",\n\n    options: {\n      offset: 10\n    },\n\n    _construct : function(elm,options) {\n      this.overrided(elm,options);\n      this.$body          = $(document.body)\n      this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)\n      //this.options        = langx.mixin({}, ScrollSpy.DEFAULTS, options)\n      this.selector       = (this.options.target || '') + ' .nav li > a'\n      this.offsets        = []\n      this.targets        = []\n      this.activeTarget   = null\n      this.scrollHeight   = 0\n\n      this.$scrollElement.on('scroll.scrollspy', langx.proxy(this.process, this))\n      this.refresh()\n      this.process()\n    },\n\n    getScrollHeight : function () {\n      return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)\n    },\n\n    refresh : function () {\n      var that          = this\n      var offsetMethod  = 'offset'\n      var offsetBase    = 0\n\n      this.offsets      = []\n      this.targets      = []\n      this.scrollHeight = this.getScrollHeight()\n\n      if (!langx.isWindow(this.$scrollElement[0])) {\n        offsetMethod = 'position'\n        offsetBase   = this.$scrollElement.scrollTop()\n      }\n\n      this.$body\n        .find(this.selector)\n        .map(function () {\n          var $el   = $(this)\n          var href  = $el.data('target') || $el.attr('href')\n          var $href = /^#./.test(href) && $(href)\n\n          return ($href\n            && $href.length\n            && $href.is(':visible')\n            && [[$href[offsetMethod]().top + offsetBase, href]]) || null\n        })\n        .sort(function (a, b) { return a[0] - b[0] })\n        .each(function () {\n          that.offsets.push(this[0])\n          that.targets.push(this[1])\n        })\n    },\n\n    process : function () {\n      var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset\n      var scrollHeight = this.getScrollHeight()\n      var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()\n      var offsets      = this.offsets\n      var targets      = this.targets\n      var activeTarget = this.activeTarget\n      var i\n\n      if (this.scrollHeight != scrollHeight) {\n        this.refresh()\n      }\n\n      if (scrollTop >= maxScroll) {\n        return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)\n      }\n\n      if (activeTarget && scrollTop < offsets[0]) {\n        this.activeTarget = null\n        return this.clear()\n      }\n\n      for (i = offsets.length; i--;) {\n        activeTarget != targets[i]\n          && scrollTop >= offsets[i]\n          && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])\n          && this.activate(targets[i])\n      }\n    },\n\n    activate : function (target) {\n      this.activeTarget = target\n\n      this.clear()\n\n      var selector = this.selector +\n        '[data-target=\"' + target + '\"],' +\n        this.selector + '[href=\"' + target + '\"]'\n\n      var active = $(selector)\n        .parents('li')\n        .addClass('active')\n\n      if (active.parent('.dropdown-menu').length) {\n        active = active\n          .closest('li.dropdown')\n          .addClass('active')\n      }\n\n      active.trigger('activate.scrollspy')\n    },\n\n    clear : function () {\n      $(this.selector)\n        .parentsUntil(this.options.target, '.active')\n        .removeClass('active')\n    }\n\n  });\n\n  plugins.register(ScrollSpy);\n\n  return spy.ScrollSpy = ScrollSpy;\n\n});\n"]}